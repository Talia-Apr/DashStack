{"ast":null,"code":"import axios from \"axios\";\nconst checkAuth = () => {\n  /*  Getting token value stored in localstorage, if token is not present we will open login page \r\n      for all internal dashboard routes  */\n  const TOKEN = localStorage.getItem(\"token\");\n  const PUBLIC_ROUTES = [\"login\", \"forgot-password\", \"register\", \"documentation\"];\n  const isPublicPage = PUBLIC_ROUTES.some(r => window.location.href.includes(r));\n  if (!TOKEN && !isPublicPage) {\n    window.location.href = '/login';\n    return;\n  } else {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${TOKEN}`;\n    axios.interceptors.request.use(function (config) {\n      // UPDATE: Add this code to show global loading indicator\n      document.body.classList.add('loading-indicator');\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    });\n    axios.interceptors.response.use(function (response) {\n      // UPDATE: Add this code to hide global loading indicator\n      document.body.classList.remove('loading-indicator');\n      return response;\n    }, function (error) {\n      document.body.classList.remove('loading-indicator');\n      return Promise.reject(error);\n    });\n    return TOKEN;\n  }\n};\nexport default checkAuth;","map":{"version":3,"names":["axios","checkAuth","TOKEN","localStorage","getItem","PUBLIC_ROUTES","isPublicPage","some","r","window","location","href","includes","defaults","headers","common","interceptors","request","use","config","document","body","classList","add","error","Promise","reject","response","remove"],"sources":["C:/xampp/htdocs/DashStack/frontend/src/app/auth.js"],"sourcesContent":["import axios from \"axios\"\r\n\r\nconst checkAuth = () => {\r\n/*  Getting token value stored in localstorage, if token is not present we will open login page \r\n    for all internal dashboard routes  */\r\n    const TOKEN = localStorage.getItem(\"token\")\r\n    const PUBLIC_ROUTES = [\"login\", \"forgot-password\", \"register\", \"documentation\"]\r\n\r\n    const isPublicPage = PUBLIC_ROUTES.some( r => window.location.href.includes(r))\r\n\r\n    if(!TOKEN && !isPublicPage){\r\n        window.location.href = '/login'\r\n        return;\r\n    }else{\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${TOKEN}`\r\n\r\n        axios.interceptors.request.use(function (config) {\r\n            // UPDATE: Add this code to show global loading indicator\r\n            document.body.classList.add('loading-indicator');\r\n            return config\r\n          }, function (error) {\r\n            return Promise.reject(error);\r\n          });\r\n          \r\n          axios.interceptors.response.use(function (response) {\r\n            // UPDATE: Add this code to hide global loading indicator\r\n            document.body.classList.remove('loading-indicator');\r\n            return response;\r\n          }, function (error) {\r\n            document.body.classList.remove('loading-indicator');\r\n            return Promise.reject(error);\r\n          });\r\n        return TOKEN\r\n    }\r\n}\r\n\r\nexport default checkAuth"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACxB;AACA;EACI,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,aAAa,GAAG,CAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,eAAe,CAAC;EAE/E,MAAMC,YAAY,GAAGD,aAAa,CAACE,IAAI,CAAEC,CAAC,IAAIC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAACJ,CAAC,CAAC,CAAC;EAE/E,IAAG,CAACN,KAAK,IAAI,CAACI,YAAY,EAAC;IACvBG,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IAC/B;EACJ,CAAC,MAAI;IACDX,KAAK,CAACa,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUb,KAAK,EAAE;IAElEF,KAAK,CAACgB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;MAC7C;MACAC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChD,OAAOJ,MAAM;IACf,CAAC,EAAE,UAAUK,KAAK,EAAE;MAClB,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CAAC,CAAC;IAEFxB,KAAK,CAACgB,YAAY,CAACW,QAAQ,CAACT,GAAG,CAAC,UAAUS,QAAQ,EAAE;MAClD;MACAP,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACM,MAAM,CAAC,mBAAmB,CAAC;MACnD,OAAOD,QAAQ;IACjB,CAAC,EAAE,UAAUH,KAAK,EAAE;MAClBJ,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACM,MAAM,CAAC,mBAAmB,CAAC;MACnD,OAAOH,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CAAC,CAAC;IACJ,OAAOtB,KAAK;EAChB;AACJ,CAAC;AAED,eAAeD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}