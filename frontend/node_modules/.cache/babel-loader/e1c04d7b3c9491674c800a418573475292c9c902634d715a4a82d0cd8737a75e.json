{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from 'react';\nconst checkAuth = async () => {\n  _s();\n  const [token, setToken] = useState('');\n  const [expire, setExpire] = useState('');\n  const [user, setUser] = useState({});\n  useEffect(() => {\n    refreshToken();\n  }, []);\n\n  // Fungsi untuk refresh token jika diperlukan\n  const refreshToken = async () => {\n    try {\n      const response = await axiosJWT.get('http://localhost:5000/token');\n      setToken(response.data.accessToken);\n      const decoded = jwtDecode(response.data.accessToken);\n      console.log(decoded);\n      setName(decoded.name);\n      setEmail(decoded.email);\n      setExpire(decoded.exp);\n    } catch (error) {\n      navigate('/login'); // Arahkan ke halaman login jika terjadi kesalahan\n    }\n  };\n  const PUBLIC_ROUTES = [\"login\", \"forgot-password\", \"register\", \"documentation\"];\n  const isPublicPage = PUBLIC_ROUTES.some(r => window.location.href.includes(r));\n  if (!token && !isPublicPage) {\n    window.location.href = '/login';\n    return false;\n  } else {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n    // Cek validitas session dengan memanggil endpoint Me\n    try {\n      const response = await axios.get('/api/me'); // Sesuaikan endpoint dengan yang Anda miliki\n      // Jika berhasil, berarti session masih valid\n      return token;\n    } catch (error) {\n      // Jika terjadi error (misalnya 401), redirect ke login\n      if (error.response && error.response.status === 401) {\n        window.location.href = '/login';\n      }\n      return false;\n    }\n  }\n};\n_s(checkAuth, \"MsaO9Fa9WXiYyuagZlbDm7d6lr0=\");\nexport default checkAuth;","map":{"version":3,"names":["axios","useState","useEffect","checkAuth","_s","token","setToken","expire","setExpire","user","setUser","refreshToken","response","axiosJWT","get","data","accessToken","decoded","jwtDecode","console","log","setName","name","setEmail","email","exp","error","navigate","PUBLIC_ROUTES","isPublicPage","some","r","window","location","href","includes","defaults","headers","common","status"],"sources":["C:/xampp/htdocs/DashStack/frontend/src/app/auth.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst checkAuth = async () => {\r\n    const [token, setToken] = useState('');\r\n    const [expire, setExpire] = useState('');\r\n    const [user, setUser] = useState({});\r\n    \r\n    useEffect(() => {\r\n      refreshToken();\r\n    }, []);\r\n\r\n    // Fungsi untuk refresh token jika diperlukan\r\n    const refreshToken = async () => {\r\n        try {\r\n            const response = await axiosJWT.get('http://localhost:5000/token');\r\n            setToken(response.data.accessToken);\r\n            const decoded = jwtDecode(response.data.accessToken);\r\n            console.log(decoded);\r\n            setName(decoded.name);\r\n            setEmail(decoded.email);\r\n            setExpire(decoded.exp);\r\n        } catch (error) {\r\n            navigate('/login'); // Arahkan ke halaman login jika terjadi kesalahan\r\n        }\r\n    };\r\n\r\n    const PUBLIC_ROUTES = [\"login\", \"forgot-password\", \"register\", \"documentation\"];\r\n    const isPublicPage = PUBLIC_ROUTES.some(r => window.location.href.includes(r));\r\n\r\n    if (!token && !isPublicPage) {\r\n        window.location.href = '/login';\r\n        return false;\r\n    } else {\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n        // Cek validitas session dengan memanggil endpoint Me\r\n        try {\r\n            const response = await axios.get('/api/me'); // Sesuaikan endpoint dengan yang Anda miliki\r\n            // Jika berhasil, berarti session masih valid\r\n            return token;\r\n        } catch (error) {\r\n            // Jika terjadi error (misalnya 401), redirect ke login\r\n            if (error.response && error.response.status === 401) {\r\n                window.location.href = '/login';\r\n            }\r\n            return false;\r\n        }\r\n        \r\n    }\r\n};\r\n\r\nexport default checkAuth;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdS,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,QAAQ,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAClER,QAAQ,CAACM,QAAQ,CAACG,IAAI,CAACC,WAAW,CAAC;MACnC,MAAMC,OAAO,GAAGC,SAAS,CAACN,QAAQ,CAACG,IAAI,CAACC,WAAW,CAAC;MACpDG,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;MACpBI,OAAO,CAACJ,OAAO,CAACK,IAAI,CAAC;MACrBC,QAAQ,CAACN,OAAO,CAACO,KAAK,CAAC;MACvBhB,SAAS,CAACS,OAAO,CAACQ,GAAG,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxB;EACJ,CAAC;EAED,MAAMC,aAAa,GAAG,CAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,eAAe,CAAC;EAC/E,MAAMC,YAAY,GAAGD,aAAa,CAACE,IAAI,CAACC,CAAC,IAAIC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAACJ,CAAC,CAAC,CAAC;EAE9E,IAAI,CAAC1B,KAAK,IAAI,CAACwB,YAAY,EAAE;IACzBG,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IAC/B,OAAO,KAAK;EAChB,CAAC,MAAM;IACHlC,KAAK,CAACoC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUjC,KAAK,EAAE;;IAElE;IACA,IAAI;MACA,MAAMO,QAAQ,GAAG,MAAMZ,KAAK,CAACc,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;MAC7C;MACA,OAAOT,KAAK;IAChB,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACZ;MACA,IAAIA,KAAK,CAACd,QAAQ,IAAIc,KAAK,CAACd,QAAQ,CAAC2B,MAAM,KAAK,GAAG,EAAE;QACjDP,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACnC;MACA,OAAO,KAAK;IAChB;EAEJ;AACJ,CAAC;AAAC9B,EAAA,CA/CID,SAAS;AAiDf,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}