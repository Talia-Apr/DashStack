{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// export const getUsersContent = createAsyncThunk('users/getContent', async () => {\n//     const response = await axios.get('http://localhost:5000/users?page=1', {});\n//     return response.data;\n// });\n\n// export const addUser = createAsyncThunk('users/addUser', async (newUser) => {\n//     const response = await axios.post('http://localhost:5000/users', newUser);\n//     return response.data; // Mengembalikan data pengguna yang ditambahkan\n// });\n\n// export const editUser = createAsyncThunk('users/editUser', async ({ id, updatedUser }) => {\n//     const response = await axios.patch(`http://localhost:5000/users/${id}`, updatedUser);\n//     return response.data; // Mengembalikan data pengguna yang telah diperbarui\n// });\n\n// export const deleteUserById = createAsyncThunk('users/deleteUser', async (id) => {\n//     await axios.delete(`http://localhost:5000/users/${id}`);\n//     return id; // Mengembalikan id pengguna yang telah dihapus\n// });\n\n// export const UsersSlice = createSlice({\n//     name: 'User',\n//     initialState: {\n//         isLoading: false,\n//         Users: [],\n//     },\n\n//     reducers: {\n//         addNewUser: (state, action) => {\n//             const { newUserObj } = action.payload;\n//             state.Users = [...state.Users, newUserObj];\n//         },\n\n//         deleteUser: (state, action) => {\n//             const { index } = action.payload;\n//             state.Users.splice(index, 1);\n//         },\n\n//         editUser: (state, action) => {\n//             const { index, updatedUserObj } = action.payload;\n//             state.Users[index] = { ...state.Users[index], ...updatedUserObj };\n//         },\n//     },\n\n//     extraReducers: {\n//         [getUsersContent.pending]: (state) => {\n//             state.isLoading = true;\n//         },\n//         [getUsersContent.fulfilled]: (state, action) => {\n//             state.Users = action.payload.data;\n//             state.isLoading = false;\n//         },\n//         [getUsersContent.rejected]: (state) => {\n//             state.isLoading = false;\n//         },\n//         [addUser.fulfilled]: (state, action) => {\n//             state.Users.push(action.payload); // Menambahkan pengguna baru ke state\n//         },\n//         [editUserById.fulfilled]: (state, action) => {\n//             const index = state.Users.findIndex(user => user.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.Users[index] = action.payload; // Memperbarui pengguna yang ada\n//             }\n//         },\n//         [deleteUserById.fulfilled]: (state, action) => {\n//             const index = state.Users.findIndex(user => user.id === action.payload);\n//             if (index !== -1) {\n//                 state.Users.splice(index, 1); // Menghapus pengguna dari state\n//             }\n//         },\n//     },\n// });\n\n// export const { addNewUser, deleteUserBy, editUserById } = UsersSlice.actions;\n\n// export default UsersSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/xampp/htdocs/DashStack/frontend/src/features/people/user/userSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\n// export const getUsersContent = createAsyncThunk('users/getContent', async () => {\r\n//     const response = await axios.get('http://localhost:5000/users?page=1', {});\r\n//     return response.data;\r\n// });\r\n\r\n// export const addUser = createAsyncThunk('users/addUser', async (newUser) => {\r\n//     const response = await axios.post('http://localhost:5000/users', newUser);\r\n//     return response.data; // Mengembalikan data pengguna yang ditambahkan\r\n// });\r\n\r\n// export const editUser = createAsyncThunk('users/editUser', async ({ id, updatedUser }) => {\r\n//     const response = await axios.patch(`http://localhost:5000/users/${id}`, updatedUser);\r\n//     return response.data; // Mengembalikan data pengguna yang telah diperbarui\r\n// });\r\n\r\n// export const deleteUserById = createAsyncThunk('users/deleteUser', async (id) => {\r\n//     await axios.delete(`http://localhost:5000/users/${id}`);\r\n//     return id; // Mengembalikan id pengguna yang telah dihapus\r\n// });\r\n\r\n// export const UsersSlice = createSlice({\r\n//     name: 'User',\r\n//     initialState: {\r\n//         isLoading: false,\r\n//         Users: [],\r\n//     },\r\n    \r\n//     reducers: {\r\n//         addNewUser: (state, action) => {\r\n//             const { newUserObj } = action.payload;\r\n//             state.Users = [...state.Users, newUserObj];\r\n//         },\r\n\r\n//         deleteUser: (state, action) => {\r\n//             const { index } = action.payload;\r\n//             state.Users.splice(index, 1);\r\n//         },\r\n\r\n//         editUser: (state, action) => {\r\n//             const { index, updatedUserObj } = action.payload;\r\n//             state.Users[index] = { ...state.Users[index], ...updatedUserObj };\r\n//         },\r\n//     },\r\n\r\n//     extraReducers: {\r\n//         [getUsersContent.pending]: (state) => {\r\n//             state.isLoading = true;\r\n//         },\r\n//         [getUsersContent.fulfilled]: (state, action) => {\r\n//             state.Users = action.payload.data;\r\n//             state.isLoading = false;\r\n//         },\r\n//         [getUsersContent.rejected]: (state) => {\r\n//             state.isLoading = false;\r\n//         },\r\n//         [addUser.fulfilled]: (state, action) => {\r\n//             state.Users.push(action.payload); // Menambahkan pengguna baru ke state\r\n//         },\r\n//         [editUserById.fulfilled]: (state, action) => {\r\n//             const index = state.Users.findIndex(user => user.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.Users[index] = action.payload; // Memperbarui pengguna yang ada\r\n//             }\r\n//         },\r\n//         [deleteUserById.fulfilled]: (state, action) => {\r\n//             const index = state.Users.findIndex(user => user.id === action.payload);\r\n//             if (index !== -1) {\r\n//                 state.Users.splice(index, 1); // Menghapus pengguna dari state\r\n//             }\r\n//         },\r\n//     },\r\n// });\r\n\r\n// export const { addNewUser, deleteUserBy, editUserById } = UsersSlice.actions;\r\n\r\n// export default UsersSlice.reducer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}