{"ast":null,"code":"import axios from \"axios\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n};\nexport const LoginUser = createAsyncThunk(\"user/loginUser\", async (user, thunkAPI) => {\n  try {\n    const response = await axios.post('http://localhost:5000/login', {\n      email: user.email,\n      password: user.password\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      const message = error.response.data.msg;\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n});\nexport const checkAuth = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(LoginUser.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(LoginUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    });\n    builder.addCase(LoginUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = auth.action;\nexport default auth.reducer;\n\n// const checkAuth = () => {\n// /*  Getting token value stored in localstorage, if token is not present we will open login page \n//     for all internal dashboard routes  */\n//     const token = localStorage.getItem(\"token\")\n//     const PUBLIC_ROUTES = [\"login\", \"forgot-password\", \"register\", \"documentation\"]\n\n//     const isPublicPage = PUBLIC_ROUTES.some( r => window.location.href.includes(r))\n\n//     if(!token && !isPublicPage){\n//         window.location.href = '/login'\n//         return false;\n//     }else{\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n\n//         axios.interceptors.request.use(function (config) {\n//             // UPDATE: Add this code to show global loading indicator\n//             document.body.classList.add('loading-indicator');\n//             return config\n//           }, function (error) {\n//             return Promise.reject(error);\n//           });\n\n//           axios.interceptors.response.use(function (response) {\n//             // UPDATE: Add this code to hide global loading indicator\n//             document.body.classList.remove('loading-indicator');\n//             return response;\n//           }, function (error) {\n//             document.body.classList.remove('loading-indicator');\n//             return Promise.reject(error);\n//           });\n//         return token\n//     }\n// }\n\n// export default checkAuth","map":{"version":3,"names":["axios","createSlice","createAsyncThunk","initialState","user","isError","isSuccess","isLoading","message","LoginUser","thunkAPI","response","post","email","password","data","error","msg","rejectWithValue","checkAuth","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","auth","reducer"],"sources":["C:/xampp/htdocs/DashStack/frontend/src/app/auth.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  user: null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: \"\"\r\n}\r\n\r\nexport const LoginUser = createAsyncThunk(\"user/loginUser\", async(user, thunkAPI) => {\r\n  try {\r\n    const response = await axios.post('http://localhost:5000/login', {\r\n      email: user.email,\r\n      password: user.password\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response){\r\n      const message = error.response.data.msg;\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n})\r\n\r\nexport const checkAuth = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState\r\n  }, \r\n  extraReducers:(builder) => {\r\n    builder.addCase(LoginUser.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(LoginUser.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.isSuccess = true;\r\n      state.user = action.payload;\r\n    })\r\n    builder.addCase(LoginUser.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.message = action.payload;\r\n    })\r\n  }\r\n});\r\n\r\nexport const {reset} = auth.action;\r\nexport default auth.reducer;\r\n\r\n// const checkAuth = () => {\r\n// /*  Getting token value stored in localstorage, if token is not present we will open login page \r\n//     for all internal dashboard routes  */\r\n//     const token = localStorage.getItem(\"token\")\r\n//     const PUBLIC_ROUTES = [\"login\", \"forgot-password\", \"register\", \"documentation\"]\r\n\r\n//     const isPublicPage = PUBLIC_ROUTES.some( r => window.location.href.includes(r))\r\n\r\n//     if(!token && !isPublicPage){\r\n//         window.location.href = '/login'\r\n//         return false;\r\n//     }else{\r\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\r\n\r\n//         axios.interceptors.request.use(function (config) {\r\n//             // UPDATE: Add this code to show global loading indicator\r\n//             document.body.classList.add('loading-indicator');\r\n//             return config\r\n//           }, function (error) {\r\n//             return Promise.reject(error);\r\n//           });\r\n          \r\n//           axios.interceptors.response.use(function (response) {\r\n//             // UPDATE: Add this code to hide global loading indicator\r\n//             document.body.classList.remove('loading-indicator');\r\n//             return response;\r\n//           }, function (error) {\r\n//             document.body.classList.remove('loading-indicator');\r\n//             return Promise.reject(error);\r\n//           });\r\n//         return token\r\n//     }\r\n// }\r\n\r\n// export default checkAuth\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGP,gBAAgB,CAAC,gBAAgB,EAAE,OAAME,IAAI,EAAEM,QAAQ,KAAK;EACnF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,6BAA6B,EAAE;MAC/DC,KAAK,EAAET,IAAI,CAACS,KAAK;MACjBC,QAAQ,EAAEV,IAAI,CAACU;IACjB,CAAC,CAAC;IACF,OAAOH,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAGA,KAAK,CAACL,QAAQ,EAAC;MAChB,MAAMH,OAAO,GAAGQ,KAAK,CAACL,QAAQ,CAACI,IAAI,CAACE,GAAG;MACvC,OAAOP,QAAQ,CAACQ,eAAe,CAACV,OAAO,CAAC;IAC1C;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMW,SAAS,GAAGlB,WAAW,CAAC;EACnCmB,IAAI,EAAE,MAAM;EACZjB,YAAY;EACZkB,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAKpB;EACpB,CAAC;EACDqB,aAAa,EAAEC,OAAO,IAAK;IACzBA,OAAO,CAACC,OAAO,CAACjB,SAAS,CAACkB,OAAO,EAAGJ,KAAK,IAAK;MAC5CA,KAAK,CAAChB,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFkB,OAAO,CAACC,OAAO,CAACjB,SAAS,CAACmB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACtDN,KAAK,CAAChB,SAAS,GAAG,KAAK;MACvBgB,KAAK,CAACjB,SAAS,GAAG,IAAI;MACtBiB,KAAK,CAACnB,IAAI,GAAGyB,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAACjB,SAAS,CAACsB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MACrDN,KAAK,CAAChB,SAAS,GAAG,KAAK;MACvBgB,KAAK,CAAClB,OAAO,GAAG,IAAI;MACpBkB,KAAK,CAACf,OAAO,GAAGqB,MAAM,CAACC,OAAO;IAChC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAACR;AAAK,CAAC,GAAGU,IAAI,CAACH,MAAM;AAClC,eAAeG,IAAI,CAACC,OAAO;;AAE3B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}