{"ast":null,"code":"import axios from \"axios\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: null,\n  token: null,\n  // Tambahkan token ke state\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n};\n\n// Async thunk untuk login\nexport const LoginUser = createAsyncThunk(\"auth/loginUser\", async (user, thunkAPI) => {\n  try {\n    const response = await axios.post(\"http://localhost:5000/login\", {\n      email: user.email,\n      password: user.password\n    });\n\n    // Simpan token di localStorage\n    const {\n      token\n    } = response.data;\n    if (token) {\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      const message = error.response.data.msg;\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n});\n\n// Slice Redux untuk auth\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    reset: state => initialState,\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      localStorage.removeItem(\"token\"); // Hapus token dari localStorage\n      delete axios.defaults.headers.common[\"Authorization\"]; // Hapus header Authorization\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(LoginUser.fulfilled, (state, action) => {\n      state.user = action.payload.user;\n    });\n    builder.addCase(LoginUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload.user;\n      state.token = action.payload.token; // Simpan token di Redux state\n    });\n    builder.addCase(LoginUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset,\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;\n\n// const checkAuth = () => {\n// /*  Getting token value stored in localstorage, if token is not present we will open login page \n//     for all internal dashboard routes  */\n//     const token = localStorage.getItem(\"token\")\n//     const PUBLIC_ROUTES = [\"login\", \"forgot-password\", \"register\", \"documentation\"]\n\n//     const isPublicPage = PUBLIC_ROUTES.some( r => window.location.href.includes(r))\n\n//     if(!token && !isPublicPage){\n//         window.location.href = '/login'\n//         return false;\n//     }else{\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n\n//         axios.interceptors.request.use(function (config) {\n//             // UPDATE: Add this code to show global loading indicator\n//             document.body.classList.add('loading-indicator');\n//             return config\n//           }, function (error) {\n//             return Promise.reject(error);\n//           });\n\n//           axios.interceptors.response.use(function (response) {\n//             // UPDATE: Add this code to hide global loading indicator\n//             document.body.classList.remove('loading-indicator');\n//             return response;\n//           }, function (error) {\n//             document.body.classList.remove('loading-indicator');\n//             return Promise.reject(error);\n//           });\n//         return token\n//     }\n// }\n\n// export default checkAuth","map":{"version":3,"names":["axios","createSlice","createAsyncThunk","initialState","user","token","isError","isSuccess","isLoading","message","LoginUser","thunkAPI","response","post","email","password","data","localStorage","setItem","defaults","headers","common","error","msg","rejectWithValue","authSlice","name","reducers","reset","state","logout","removeItem","extraReducers","builder","addCase","fulfilled","action","payload","rejected","actions","reducer"],"sources":["C:/xampp/htdocs/DashStack/frontend/src/app/auth.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  user: null,\r\n  token: null, // Tambahkan token ke state\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: \"\"\r\n};\r\n\r\n// Async thunk untuk login\r\nexport const LoginUser = createAsyncThunk(\r\n  \"auth/loginUser\",\r\n  async (user, thunkAPI) => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/login\", {\r\n        email: user.email,\r\n        password: user.password\r\n      });\r\n\r\n      // Simpan token di localStorage\r\n      const { token } = response.data;\r\n      if (token) {\r\n        localStorage.setItem(\"token\", token);\r\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.response) {\r\n        const message = error.response.data.msg;\r\n        return thunkAPI.rejectWithValue(message);\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n// Slice Redux untuk auth\r\nexport const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n    logout: (state) => {\r\n      state.user = null;\r\n      state.token = null;\r\n      localStorage.removeItem(\"token\"); // Hapus token dari localStorage\r\n      delete axios.defaults.headers.common[\"Authorization\"]; // Hapus header Authorization\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(LoginUser.fulfilled, (state, action) => {\r\n      state.user = action.payload.user;\r\n    });    \r\n    builder.addCase(LoginUser.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.isSuccess = true;\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token; // Simpan token di Redux state\r\n    });\r\n    builder.addCase(LoginUser.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.isError = true;\r\n      state.message = action.payload;\r\n    });\r\n  }\r\n});\r\n\r\nexport const { reset, logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n\r\n\r\n// const checkAuth = () => {\r\n// /*  Getting token value stored in localstorage, if token is not present we will open login page \r\n//     for all internal dashboard routes  */\r\n//     const token = localStorage.getItem(\"token\")\r\n//     const PUBLIC_ROUTES = [\"login\", \"forgot-password\", \"register\", \"documentation\"]\r\n\r\n//     const isPublicPage = PUBLIC_ROUTES.some( r => window.location.href.includes(r))\r\n\r\n//     if(!token && !isPublicPage){\r\n//         window.location.href = '/login'\r\n//         return false;\r\n//     }else{\r\n//         axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\r\n\r\n//         axios.interceptors.request.use(function (config) {\r\n//             // UPDATE: Add this code to show global loading indicator\r\n//             document.body.classList.add('loading-indicator');\r\n//             return config\r\n//           }, function (error) {\r\n//             return Promise.reject(error);\r\n//           });\r\n          \r\n//           axios.interceptors.response.use(function (response) {\r\n//             // UPDATE: Add this code to hide global loading indicator\r\n//             document.body.classList.remove('loading-indicator');\r\n//             return response;\r\n//           }, function (error) {\r\n//             document.body.classList.remove('loading-indicator');\r\n//             return Promise.reject(error);\r\n//           });\r\n//         return token\r\n//     }\r\n// }\r\n\r\n// export default checkAuth\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}